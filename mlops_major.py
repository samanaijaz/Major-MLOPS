# -*- coding: utf-8 -*-
"""MLOPS_Major.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lgU0xZEJ1HE-qUTI8niqrLxD6ciEVpWE

#Question 1: Data Structure and Processing Pipeline
"""

#loading diabetes dataset
from sklearn.datasets import load_diabetes
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
import pandas as pd
import numpy as np

class DiabetesDataProcessor:
    def __init__(self):
        data = load_diabetes()
        self.df = pd.DataFrame(data.data, columns=data.feature_names)
        self.df['target'] = data.target
        self.scaler = StandardScaler()

    def prepare_data(self, test_size=0.2, random_state=42):
        X = self.df.drop(columns=['target'])
        y = self.df['target']

        X_scaled = self.scaler.fit_transform(X)

        X_train, X_test, y_train, y_test = train_test_split(
            X_scaled, y, test_size=test_size, random_state=random_state)

        return X_train, X_test, y_train, y_test

    def get_feature_stats(self):
        return self.df.describe()

processor = DiabetesDataProcessor()
X_train, X_test, y_train, y_test = processor.prepare_data()
print(processor.get_feature_stats())

"""#Question 2: Experiment Tracking and Model Development"""

#installing ML Flow
!pip install mlflow

from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import cross_val_score
import mlflow
import mlflow.sklearn
from sklearn.metrics import accuracy_score, precision_score, recall_score

class DiabetesExperiment:
    def __init__(self, data_processor):
        self.data_processor = data_processor
        self.models = {
            'Logistic Regression': LogisticRegression(),
            'Random Forest': RandomForestClassifier()
        }

    def run_experiment(self, X_train, X_test, y_train, y_test):
        for model_name, model in self.models.items():
            with mlflow.start_run(run_name=model_name):

                model.fit(X_train, y_train)

                cv_scores = cross_val_score(model, X_train, y_train, cv=5)

                y_pred = model.predict(X_test)

                accuracy = accuracy_score(y_test, y_pred)
                precision = precision_score(y_test, y_pred, average='macro')
                recall = recall_score(y_test, y_pred, average='macro')

                mlflow.log_metric("accuracy", accuracy)
                mlflow.log_metric("precision", precision)
                mlflow.log_metric("recall", recall)
                mlflow.log_metric("cv_accuracy_mean", np.mean(cv_scores))

                mlflow.sklearn.log_model(model, model_name)

experiment = DiabetesExperiment(processor)
experiment.run_experiment(X_train, X_test, y_train, y_test)

"""#Question 3: Model Optimization and Testing"""

from joblib import dump, load
import unittest

class DiabetesModelOptimizer:
    def __init__(self, experiment):
        self.experiment = experiment

    def save_model(self, model, filename="logistic_regression_model.joblib"):
        dump(model, filename)
        print(f"Model saved to {filename}")

    def load_model(self, filename="logistic_regression_model.joblib"):
        return load(filename)

    def run_tests(self):
        class DiabetesModelTest(unittest.TestCase):
            def test_model_saving_and_loading(self):
                model = self.experiment.models['Logistic Regression']
                optimizer = DiabetesModelOptimizer(self.experiment)
                optimizer.save_model(model)
                loaded_model = optimizer.load_model()
                self.assertIsNotNone(loaded_model)
                self.assertEqual(type(model), type(loaded_model))

        unittest.main(argv=[''], exit=False)

optimizer = DiabetesModelOptimizer(experiment)
optimizer.save_model(experiment.models['Logistic Regression'])
optimizer.run_tests()